apply plugin: "com.android.application"
apply plugin: "kotlin-android"

android {
  compileSdkVersion Config.compileSdk

  defaultConfig {
    minSdkVersion Config.minSdk
    targetSdkVersion Config.targetSdk
    multiDexEnabled = false
  }

  flavorDimensions "default"
  productFlavors {
    extensionList.each { extension ->
      "${extension.flavor}" {
        dimension "default"
        versionCode extension.versionCode
        versionName "${extension.libVersion}.${extension.versionCode}"
        manifestPlaceholders = [
          appName: "Tachiyomi: ${extension.name} (${extension.lang})",
          sourceId: ":${extension.id}",
          sourceName: extension.name,
          sourceLang: extension.lang,
          sourceDescription: extension.description,
          sourceNsfw: extension.nsfw ? 1 : 0
        ]
        ext.extension = extension
      }
    }
  }

  sourceSets {
    main {
      manifest.srcFile "$rootDir/extensions/AndroidManifest.xml"
      java.srcDirs = ["main/src"]
      res.srcDirs = ["main/res"]
      resources.srcDirs = []
    }
    extensionList.each { extension ->
      def sourceDir = extension.sourceDir
      "${extension.flavor}" {
        java.srcDirs = ["${sourceDir}/src"]
        res.srcDirs = ["${sourceDir}/res"]
      }
    }
  }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }

  applicationVariants.all { variant ->
    def extension = variant.productFlavors[0].ext.extension
    variant.outputs.all {
      def nameLower = extension.name.toLowerCase()
      outputFileName = "tachiyomi-${extension.lang}-${nameLower}-v${versionName}.apk"
    }
    variant.generateBuildConfigProvider?.configure {
      enabled = false
    }
  }

  if (System.getenv("STORE_PATH") != null) {
    signingConfigs {
      sign {
        storeFile file(System.getenv("STORE_PATH"))
        keyAlias System.getenv("STORE_ALIAS")
        storePassword System.getenv("STORE_PASS")
        keyPassword System.getenv("KEY_PASS")
      }
    }
    buildTypes.all {
      signingConfig signingConfigs.sign
    }
  }
}

dependencies {
  implementation project(Proj.defaultRes)
  compileOnly Deps.tachiyomiCore
  compileOnly Deps.sourceApi
  compileOnly Deps.okhttp
  compileOnly Deps.jsoup
  compileOnly Deps.gson
  compileOnly Deps.kotson

  extensionList.each { extension ->
    if (!extension.deepLinks.empty) {
      add("${extension.flavor}Implementation", project(Proj.deeplink))
    }
  }
}
